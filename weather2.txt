import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [city, setCity] = useState('');
  const [weatherData, setWeatherData] = useState(null);
  const [activeTab, setActiveTab] = useState('current');
  const [chatMessages, setChatMessages] = useState([]);
  const [userMessage, setUserMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const weatherApiKey = 'cb0ca47163a64acb9ff131640251906';
  const aiApiKey = 'AIzaSyAGQDvQzbpc_JM2SkNfRYDzwPMbIpuNRwE';

  const fetchWeatherData = async () => {
    if (!city) return;
    
    setLoading(true);
    setError(null);
    
    try {
      let endpoint = '';
      switch (activeTab) {
        case 'current':
          endpoint = `https://api.weatherapi.com/v1/current.json?key=${weatherApiKey}&q=${city}`;
          break;
        case 'air':
          endpoint = `https://api.weatherapi.com/v1/forecast.json?key=${weatherApiKey}&q=${city}&aqi=yes`;
          break;
        case 'astronomy':
          endpoint = `https://api.weatherapi.com/v1/astronomy.json?key=${weatherApiKey}&q=${city}&dt=${new Date().toISOString().split('T')[0]}`;
          break;
        case 'location':
          endpoint = `https://api.weatherapi.com/v1/search.json?key=${weatherApiKey}&q=${city}`;
          break;
        default:
          endpoint = `https://api.weatherapi.com/v1/current.json?key=${weatherApiKey}&q=${city}`;
      }
      
      const response = await fetch(endpoint);
      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error.message);
      }
      
      setWeatherData(data);
    } catch (err) {
      setError(err.message);
      setWeatherData(null);
    } finally {
      setLoading(false);
    }
  };

  const handleChatSubmit = async (e) => {
    e.preventDefault();
    if (!userMessage.trim()) return;
    
    const userMsg = { role: 'user', content: userMessage };
    setChatMessages(prev => [...prev, userMsg]);
    setUserMessage('');
    
    setLoading(true);
    
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${aiApiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: `You are a weather assistant. Answer questions about weather. Current weather data: ${JSON.stringify(weatherData)}. User question: ${userMessage}`
              }]
            }]
          }),
        }
      );
      
      const data = await response.json();
      const botResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "I couldn't understand that. Can you ask about the weather?";
      
      setChatMessages(prev => [...prev, { role: 'bot', content: botResponse }]);
    } catch (err) {
      setChatMessages(prev => [...prev, { role: 'bot', content: "Sorry, I'm having trouble responding. Please try again later." }]);
    } finally {
      setLoading(false);
    }
  };

  const renderWeatherData = () => {
    if (loading) return <div className="loading">Loading...</div>;
    if (error) return <div className="error">Error: {error}</div>;
    if (!weatherData) return null;
    
    switch (activeTab) {
      case 'current':
        return (
          <div className="weather-card">
            <h2>Current Weather in {weatherData.location?.name}</h2>
            <div className="weather-main">
              <img src={`https:${weatherData.current?.condition?.icon}`} alt="Weather icon" />
              <div className="temp">{weatherData.current?.temp_c}°C</div>
            </div>
            <div className="weather-details">
              <p>Condition: {weatherData.current?.condition?.text}</p>
              <p>Feels like: {weatherData.current?.feelslike_c}°C</p>
              <p>Humidity: {weatherData.current?.humidity}%</p>
              <p>Wind: {weatherData.current?.wind_kph} km/h</p>
            </div>
          </div>
        );
      case 'air':
        return (
          <div className="weather-card">
            <h2>Air Quality in {weatherData.location?.name}</h2>
            {weatherData.current?.air_quality ? (
              <div className="air-quality">
                <p>CO: {weatherData.current.air_quality.co} µg/m³</p>
                <p>NO2: {weatherData.current.air_quality.no2} µg/m³</p>
                <p>O3: {weatherData.current.air_quality.o3} µg/m³</p>
                <p>SO2: {weatherData.current.air_quality.so2} µg/m³</p>
                <p>PM2.5: {weatherData.current.air_quality.pm2_5} µg/m³</p>
                <p>PM10: {weatherData.current.air_quality.pm10} µg/m³</p>
                <p>US EPA Index: {weatherData.current.air_quality['us-epa-index']}</p>
              </div>
            ) : <p>No air quality data available</p>}
          </div>
        );
      case 'astronomy':
        return (
          <div className="weather-card">
            <h2>Astronomy Data for {weatherData.location?.name}</h2>
            {weatherData.astronomy?.astro ? (
              <div className="astronomy-data">
                <p>Sunrise: {weatherData.astronomy.astro.sunrise}</p>
                <p>Sunset: {weatherData.astronomy.astro.sunset}</p>
                <p>Moonrise: {weatherData.astronomy.astro.moonrise}</p>
                <p>Moonset: {weatherData.astronomy.astro.moonset}</p>
                <p>Moon Phase: {weatherData.astronomy.astro.moon_phase}</p>
                <p>Moon Illumination: {weatherData.astronomy.astro.moon_illumination}%</p>
              </div>
            ) : <p>No astronomy data available</p>}
          </div>
        );
      case 'location':
        return (
          <div className="weather-card">
            <h2>Location Data for {city}</h2>
            {Array.isArray(weatherData) ? (
              <div className="location-results">
                {weatherData.map((loc, index) => (
                  <div key={index} className="location-item">
                    <p>Name: {loc.name}</p>
                    <p>Region: {loc.region}</p>
                    <p>Country: {loc.country}</p>
                    <p>Lat: {loc.lat}, Lon: {loc.lon}</p>
                  </div>
                ))}
              </div>
            ) : (
              <div className="location-item">
                <p>Name: {weatherData.location?.name}</p>
                <p>Region: {weatherData.location?.region}</p>
                <p>Country: {weatherData.location?.country}</p>
                <p>Lat: {weatherData.location?.lat}, Lon: {weatherData.location?.lon}</p>
                <p>Local Time: {weatherData.location?.localtime}</p>
              </div>
            )}
          </div>
        );
      case 'chatbot':
        return (
          <div className="chatbot-container">
            <div className="chat-messages">
              {chatMessages.map((msg, index) => (
                <div key={index} className={`message ${msg.role}`}>
                  {msg.content}
                </div>
              ))}
              {loading && <div className="message bot">Thinking...</div>}
            </div>
            <form onSubmit={handleChatSubmit} className="chat-input">
              <input
                type="text"
                value={userMessage}
                onChange={(e) => setUserMessage(e.target.value)}
                placeholder="Ask about the weather..."
                disabled={loading}
              />
              <button type="submit" disabled={loading}>Send</button>
            </form>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="app">
      <nav className="navbar">
        <ul>
          <li className={activeTab === 'current' ? 'active' : ''} onClick={() => setActiveTab('current')}>
            <i className="fas fa-sun"></i> Current Weather
          </li>
          <li className={activeTab === 'air' ? 'active' : ''} onClick={() => setActiveTab('air')}>
            <i className="fas fa-wind"></i> Air Quality
          </li>
          <li className={activeTab === 'astronomy' ? 'active' : ''} onClick={() => setActiveTab('astronomy')}>
            <i className="fas fa-moon"></i> Astronomy
          </li>
          <li className={activeTab === 'location' ? 'active' : ''} onClick={() => setActiveTab('location')}>
            <i className="fas fa-map-marker-alt"></i> Location Data
          </li>
          <li className={activeTab === 'chatbot' ? 'active' : ''} onClick={() => setActiveTab('chatbot')}>
            <i className="fas fa-robot"></i> Weather Bot
          </li>
        </ul>
      </nav>

      <div className="main-content">
        <h1 className="app-title">Weather App Project for Visual Programming</h1>
        
        {activeTab !== 'chatbot' && (
          <div className="search-container">
            <input
              type="text"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              placeholder="Enter your city name"
            />
            <button onClick={fetchWeatherData} disabled={loading}>
              {loading ? 'Loading...' : 'Let\'s Go!'}
            </button>
          </div>
        )}

        {renderWeatherData()}
      </div>
    </div>
  );
}

export default App;


...........






/* General Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

:root {
  --primary-color: #3498db;
  --secondary-color: #2980b9;
  --accent-color: #e74c3c;
  --light-color: #ecf0f1;
  --dark-color: #2c3e50;
  --success-color: #2ecc71;
  --warning-color: #f39c12;
  --danger-color: #e74c3c;
}

body {
  background-color: #f5f7fa;
  color: #333;
}

.app {
  display: flex;
  min-height: 100vh;
}

/* Navbar Styles */
.navbar {
  background-color: var(--dark-color);
  color: white;
  width: 250px;
  min-height: 100vh;
  padding: 20px 0;
  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
}

.navbar ul {
  list-style-type: none;
}

.navbar li {
  padding: 15px 25px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
}

.navbar li:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.navbar li.active {
  background-color: var(--primary-color);
  border-left: 4px solid var(--accent-color);
}

.navbar i {
  margin-right: 10px;
  width: 20px;
  text-align: center;
}

/* Main Content Styles */
.main-content {
  flex: 1;
  padding: 30px;
}

.app-title {
  text-align: center;
  margin-bottom: 30px;
  color: var(--dark-color);
  font-size: 2.2rem;
  background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.search-container {
  display: flex;
  justify-content: center;
  margin-bottom: 30px;
  gap: 10px;
}

.search-container input {
  padding: 12px 15px;
  width: 60%;
  max-width: 500px;
  border: 2px solid #ddd;
  border-radius: 25px;
  font-size: 1rem;
  outline: none;
  transition: all 0.3s;
}

.search-container input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 8px rgba(52, 152, 219, 0.3);
}

.search-container button {
  padding: 12px 25px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 25px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;
  transition: all 0.3s;
}

.search-container button:hover {
  background-color: var(--secondary-color);
  transform: translateY(-2px);
}

.search-container button:disabled {
  background-color: #95a5a6;
  cursor: not-allowed;
  transform: none;
}

/* Weather Card Styles */
.weather-card {
  background: white;
  border-radius: 15px;
  padding: 25px;
  margin: 0 auto;
  max-width: 600px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.weather-card h2 {
  color: var(--dark-color);
  margin-bottom: 20px;
  font-size: 1.8rem;
}

.weather-main {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
}

.weather-main img {
  width: 100px;
  height: 100px;
  margin-right: 20px;
}

.temp {
  font-size: 3.5rem;
  font-weight: bold;
  color: var(--primary-color);
}

.weather-details {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 15px;
  text-align: left;
  margin-top: 20px;
}

.weather-details p {
  background-color: #f8f9fa;
  padding: 10px 15px;
  border-radius: 8px;
  font-size: 0.95rem;
}

.air-quality p, .astronomy-data p, .location-item p {
  background-color: #f8f9fa;
  padding: 10px 15px;
  border-radius: 8px;
  margin-bottom: 10px;
  text-align: left;
}

.location-results {
  display: grid;
  gap: 15px;
}

.location-item {
  background-color: #f8f9fa;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 15px;
}

/* Chatbot Styles */
.chatbot-container {
  max-width: 800px;
  margin: 0 auto;
  background: white;
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.chat-messages {
  height: 400px;
  overflow-y: auto;
  padding: 20px;
  background: #f5f7fa;
}

.message {
  margin-bottom: 15px;
  padding: 12px 15px;
  border-radius: 18px;
  max-width: 70%;
  line-height: 1.4;
}

.message.user {
  background-color: var(--primary-color);
  color: white;
  margin-left: auto;
  border-bottom-right-radius: 5px;
}

.message.bot {
  background-color: #e9ecef;
  color: #333;
  margin-right: auto;
  border-bottom-left-radius: 5px;
}

.chat-input {
  display: flex;
  padding: 15px;
  background: white;
  border-top: 1px solid #eee;
}

.chat-input input {
  flex: 1;
  padding: 12px 15px;
  border: 2px solid #ddd;
  border-radius: 25px;
  outline: none;
  font-size: 1rem;
}

.chat-input button {
  margin-left: 10px;
  padding: 12px 20px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 25px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s;
}

.chat-input button:hover {
  background-color: var(--secondary-color);
}

/* Utility Classes */
.loading, .error {
  text-align: center;
  padding: 20px;
  font-size: 1.1rem;
  margin: 20px 0;
}

.loading {
  color: var(--primary-color);
}

.error {
  color: var(--danger-color);
}

/* Responsive Design */
@media (max-width: 768px) {
  .app {
    flex-direction: column;
  }
  
  .navbar {
    width: 100%;
    min-height: auto;
    padding: 10px 0;
  }
  
  .navbar ul {
    display: flex;
    overflow-x: auto;
    padding-bottom: 10px;
  }
  
  .navbar li {
    white-space: nowrap;
    padding: 10px 15px;
  }
  
  .main-content {
    padding: 20px;
  }
  
  .search-container {
    flex-direction: column;
    align-items: center;
  }
  
  .search-container input {
    width: 100%;
  }
  
  .weather-details {
    grid-template-columns: 1fr;
  }
  
  .chat-messages {
    height: 300px;
  }
}

/* Font Awesome Icons (if not using the actual library) */
.fas {
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  text-rendering: auto;
  line-height: 1;
}

.fa-sun:before { content: "☀️"; }
.fa-wind:before { content: "🌬️"; }
.fa-moon:before { content: "🌙"; }
.fa-map-marker-alt:before { content: "📍"; }
.fa-robot:before { content: "🤖"; }