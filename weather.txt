import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [city, setCity] = useState('');
  const [activeTab, setActiveTab] = useState('current');
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const API_KEY = 'cb0ca47163a64acb9ff131640251906';

  const fetchWeatherData = async () => {
    if (!city) return;
    
    setLoading(true);
    setError(null);
    
    try {
      let endpoint = 'current.json';
      if (activeTab === 'astronomy') endpoint = 'astronomy.json';
      
      const response = await fetch(
        `https://api.weatherapi.com/v1/${endpoint}?key=${API_KEY}&q=${city}&aqi=yes`
      );
      
      if (!response.ok) throw new Error('Failed to fetch data');
      
      const data = await response.json();
      setWeatherData(data);
    } catch (err) {
      setError(err.message);
      setWeatherData(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (city && weatherData) {
      fetchWeatherData();
    }
  }, [activeTab]);

  const getAqiLevel = (aqi) => {
    if (!aqi) return { level: 'N/A', color: 'gray' };
    if (aqi <= 50) return { level: 'Good', color: 'green' };
    if (aqi <= 100) return { level: 'Moderate', color: 'yellow' };
    if (aqi <= 150) return { level: 'Unhealthy for Sensitive', color: 'orange' };
    if (aqi <= 200) return { level: 'Unhealthy', color: 'red' };
    if (aqi <= 300) return { level: 'Very Unhealthy', color: 'purple' };
    return { level: 'Hazardous', color: 'maroon' };
  };

  const renderCurrentWeather = () => {
    if (!weatherData?.current) return <p>Enter a city to see weather data</p>;
    
    return (
      <div className="weather-card">
        <div className="weather-header">
          <h2>{weatherData.location.name}, {weatherData.location.country}</h2>
          <p>{new Date(weatherData.location.localtime).toLocaleString()}</p>
        </div>
        
        <div className="weather-main">
          <div className="weather-primary">
            <img src={weatherData.current.condition.icon} alt="weather icon" />
            <div>
              <h1>{weatherData.current.temp_c}°C</h1>
              <p>{weatherData.current.condition.text}</p>
            </div>
          </div>
          
          <div className="weather-details">
            <div>
              <span>Feels Like</span>
              <span>{weatherData.current.feelslike_c}°C</span>
            </div>
            <div>
              <span>Humidity</span>
              <span>{weatherData.current.humidity}%</span>
            </div>
            <div>
              <span>Wind</span>
              <span>{weatherData.current.wind_kph} km/h</span>
            </div>
            <div>
              <span>Pressure</span>
              <span>{weatherData.current.pressure_mb} mb</span>
            </div>
            <div>
              <span>Visibility</span>
              <span>{weatherData.current.vis_km} km</span>
            </div>
            <div>
              <span>UV Index</span>
              <span>{weatherData.current.uv}</span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderAirQuality = () => {
    if (!weatherData?.current?.air_quality) return <p>No air quality data available</p>;
    
    const aqi = weatherData.current.air_quality['us-epa-index'];
    const aqiInfo = getAqiLevel(aqi);
    
    return (
      <div className="air-quality-card">
        <h2>Air Quality in {weatherData.location.name}</h2>
        
        <div className="aqi-display" style={{ backgroundColor: aqiInfo.color }}>
          <h3>US AQI: {aqi || 'N/A'}</h3>
          <p>{aqiInfo.level}</p>
        </div>
        
        <div className="pollutants-grid">
          <div className="pollutant">
            <span>CO</span>
            <span>{weatherData.current.air_quality.co.toFixed(1)} µg/m³</span>
          </div>
          <div className="pollutant">
            <span>O₃</span>
            <span>{weatherData.current.air_quality.o3.toFixed(1)} µg/m³</span>
          </div>
          <div className="pollutant">
            <span>NO₂</span>
            <span>{weatherData.current.air_quality.no2.toFixed(1)} µg/m³</span>
          </div>
          <div className="pollutant">
            <span>SO₂</span>
            <span>{weatherData.current.air_quality.so2.toFixed(1)} µg/m³</span>
          </div>
          <div className="pollutant">
            <span>PM2.5</span>
            <span>{weatherData.current.air_quality.pm2_5.toFixed(1)} µg/m³</span>
          </div>
          <div className="pollutant">
            <span>PM10</span>
            <span>{weatherData.current.air_quality.pm10.toFixed(1)} µg/m³</span>
          </div>
        </div>
      </div>
    );
  };

  const renderAstronomy = () => {
    if (!weatherData?.astronomy) return <p>No astronomy data available</p>;
    
    return (
      <div className="astronomy-card">
        <h2>Astronomy for {weatherData.location.name}</h2>
        
        <div className="astro-data">
          <div className="astro-item">
            <h3>Sun</h3>
            <p>Sunrise: {weatherData.astronomy.astro.sunrise}</p>
            <p>Sunset: {weatherData.astronomy.astro.sunset}</p>
          </div>
          
          <div className="astro-item">
            <h3>Moon</h3>
            <p>Moonrise: {weatherData.astronomy.astro.moonrise}</p>
            <p>Moonset: {weatherData.astronomy.astro.moonset}</p>
            <p>Phase: {weatherData.astronomy.astro.moon_phase}</p>
            <p>Illumination: {weatherData.astronomy.astro.moon_illumination}%</p>
          </div>
        </div>
      </div>
    );
  };

  const renderLocation = () => {
    if (!weatherData?.location) return <p>No location data available</p>;
    
    return (
      <div className="location-card">
        <h2>Location Information</h2>
        
        <div className="location-details">
          <div>
            <span>Name</span>
            <span>{weatherData.location.name}</span>
          </div>
          <div>
            <span>Region</span>
            <span>{weatherData.location.region}</span>
          </div>
          <div>
            <span>Country</span>
            <span>{weatherData.location.country}</span>
          </div>
          <div>
            <span>Latitude</span>
            <span>{weatherData.location.lat}</span>
          </div>
          <div>
            <span>Longitude</span>
            <span>{weatherData.location.lon}</span>
          </div>
          <div>
            <span>Timezone</span>
            <span>{weatherData.location.tz_id}</span>
          </div>
          <div>
            <span>Local Time</span>
            <span>{weatherData.location.localtime}</span>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="app-container">
      <h1>Weather App</h1>
      
      <div className="search-container">
        <input
          type="text"
          placeholder="Enter city name"
          value={city}
          onChange={(e) => setCity(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && fetchWeatherData()}
        />
        <button onClick={fetchWeatherData} disabled={loading}>
          {loading ? 'Loading...' : 'Get Data'}
        </button>
      </div>
      
      <nav className="tabs">
        <button
          className={activeTab === 'current' ? 'active' : ''}
          onClick={() => setActiveTab('current')}
        >
          Current Weather
        </button>
        <button
          className={activeTab === 'air' ? 'active' : ''}
          onClick={() => setActiveTab('air')}
        >
          Air Quality
        </button>
        <button
          className={activeTab === 'astronomy' ? 'active' : ''}
          onClick={() => setActiveTab('astronomy')}
        >
          Astronomy
        </button>
        <button
          className={activeTab === 'location' ? 'active' : ''}
          onClick={() => setActiveTab('location')}
        >
          Location
        </button>
      </nav>
      
      {error && <div className="error">{error}</div>}
      
      <div className="content">
        {activeTab === 'current' && renderCurrentWeather()}
        {activeTab === 'air' && renderAirQuality()}
        {activeTab === 'astronomy' && renderAstronomy()}
        {activeTab === 'location' && renderLocation()}
      </div>
    </div>
  );
}

export default App;




................



/* Base Styles */
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f7fa;
  color: #333;
}

.app-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 20px;
}

h1 {
  text-align: center;
  color: #2c3e50;
  margin-bottom: 20px;
}

/* Search Container */
.search-container {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.search-container input {
  flex: 1;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
}

.search-container button {
  padding: 12px 24px;
  background-color: #3498db;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.search-container button:disabled {
  background-color: #95a5a6;
  cursor: not-allowed;
}

/* Tabs Navigation */
.tabs {
  display: flex;
  margin-bottom: 20px;
  border-bottom: 1px solid #ddd;
}

.tabs button {
  padding: 12px 20px;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 16px;
  color: #7f8c8d;
  border-bottom: 3px solid transparent;
}

.tabs button.active {
  color: #2c3e50;
  border-bottom-color: #3498db;
  font-weight: bold;
}

/* Error Message */
.error {
  color: #e74c3c;
  background-color: #fadbd8;
  padding: 10px;
  border-radius: 4px;
  margin-bottom: 20px;
}

/* Weather Card */
.weather-card {
  background-color: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.weather-header {
  text-align: center;
  margin-bottom: 20px;
}

.weather-main {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.weather-primary {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 20px;
}

.weather-primary img {
  width: 80px;
  height: 80px;
}

.weather-primary h1 {
  margin: 0;
  font-size: 3rem;
}

.weather-details {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 15px;
}

.weather-details div {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.weather-details span:first-child {
  font-weight: 500;
  color: #7f8c8d;
}

/* Air Quality Card */
.air-quality-card {
  background-color: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.aqi-display {
  padding: 20px;
  border-radius: 8px;
  color: white;
  text-align: center;
  margin: 20px 0;
}

.pollutants-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 15px;
}

.pollutant {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.pollutant span:first-child {
  font-weight: 500;
  margin-bottom: 5px;
}

/* Astronomy Card */
.astronomy-card {
  background-color: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.astro-data {
  display: flex;
  gap: 30px;
  margin-top: 20px;
}

.astro-item {
  flex: 1;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.astro-item h3 {
  margin-top: 0;
  color: #2c3e50;
}

/* Location Card */
.location-card {
  background-color: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.location-details {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 20px;
}

.location-details div {
  display: flex;
  flex-direction: column;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.location-details span:first-child {
  font-weight: 500;
  color: #7f8c8d;
  margin-bottom: 5px;
}